
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "http://localhost:4000/devel-blog",
    "title": "Development Blog",
    "body": "Every Thursday, a group of folks working on the ChRIS project meet to share their status for working on the project. There are often useful discussions about development and planning and demos during these meetings. This is a simple site set up to log the meeting minutes of those meetings for posterity. It is driven via the https://github. com/FNNDSC/status repository. Questions or bug reports?: Head over to the Github repository for this site.  "
    }, {
    "id": 2,
    "url": "http://localhost:4000/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "http://localhost:4000/code",
    "title": "Code",
    "body": "Stay tuned for an overview of our code repositories. "
    }, {
    "id": 4,
    "url": "http://localhost:4000/docs",
    "title": "Documentation",
    "body": "Stay tuned for content about how to use ChRIS and how to develop for ChRIS. "
    }, {
    "id": 5,
    "url": "http://localhost:4000/",
    "title": "Home",
    "body": "As more and more of our lives become ever intimately impacted by computing, open source, open standards, and open platforms are fundamentally important.  	 	  	  	  The ChRIS Store:    The ChRIS Store is where you can find, download, or contribute your own medical imaging analytical software for deployment on the ChRIS platform. We link to a recent prototype here.     	 	  	   	  Creating ChRIS: 	  This video series created by Red Hat tells the story of the ChRIS project, introduces some of the people behind it, and lays out the ChRIS vision of cloud technology improving medical care.     	 			  	  ChRIS on theCUBE:    Watch this great overview of ChRIS as explained by Dr. Ellen Grant and Dr. Rudolph Pienaar of Boston Children's Hospital in an interview with theCUBE during the 2019 Red Hat Summit in Boston, Massachusetts.          Featured Development Blog Posts:                                                                                                                                                                                                           26 March Status - Node parameter UI demo                              :               Gideon showed us his updates to the node parameter entry UI based on the discussion we had during the last time he demoed it. Sandeep,. . . :                                                                                                                                                                       Máirín Duffy                                26 Mar 2020                                                                                                                                                                                                                                                                                                                        12 March Status - Node config UI Demo + pacsquery UI demo                              :               Gideon has a working demo for the node config UI, so we walked through it and discussed it. Then, Rudolph gave us a demo of. . . :                                                                                                                                                                       Máirín Duffy                                12 Mar 2020                                                                                                                                                                                                                                                                                                                  05 March Status - Async task queue for cube and more fsplugin UX discussion                              :               We went through everyone’s status, and The main items of discussion during this meeting were the new asynchronous task queue Jorge developed and further work. . . :                                                                                                                                                                       Máirín Duffy                                05 Mar 2020                                                                                                                                                                                                                                                                                                                  27 Feb Status - More Hackathon planning and fsplugin UX discussion                              :               The two major discussions we had during this meeting beyond the usual status reports was Hackathon planning, how to integrate fsplugins in the ChRIS UI,. . . :                                                                                                                                                                       Máirín Duffy                                27 Feb 2020                                                                                                                            "
    }, {
    "id": 6,
    "url": "http://localhost:4000/plugins",
    "title": "Plugins for ChRIS",
    "body": "Stay tuned for content about how you can obtain ChRIS plugins via the ChRIS store, as well as how you can develop your own plugins. "
    }, {
    "id": 7,
    "url": "http://localhost:4000/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 8,
    "url": "http://localhost:4000/page2/",
    "title": "Home",
    "body": "{% if page. url == “/” %} As more and more of our lives become ever intimately impacted by computing, open source, open standards, and open platforms are fundamentally important.  	 	  	  	  The ChRIS Store:    The ChRIS Store is where you can find, download, or contribute your own medical imaging analytical software for deployment on the ChRIS platform. We link to a recent prototype here.     	 	  	   	  Creating ChRIS: 	  This video series created by Red Hat tells the story of the ChRIS project, introduces some of the people behind it, and lays out the ChRIS vision of cloud technology improving medical care.     	 			  	  ChRIS on theCUBE:    Watch this great overview of ChRIS as explained by Dr. Ellen Grant and Dr. Rudolph Pienaar of Boston Children's Hospital in an interview with theCUBE during the 2019 Red Hat Summit in Boston, Massachusetts.          Featured Development Blog Posts:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %} "
    }, {
    "id": 9,
    "url": "http://localhost:4000/status-mar-26-2020/",
    "title": "26 March Status - Node parameter UI demo",
    "body": "2020/03/26 - Gideon showed us his updates to the node parameter entry UI based on the discussion we had during the last time he demoed it. Sandeep, Parul, and Rudolph planned an MOC howto session tomorrow afternoon. Jorge updated us on his progress adding shortform parameter names as a separate attribute in CUBE, and Mo discussed ideas for recruiting new contributors.  Gideon Node Parameter UI Demo   Worked on “Add a new node feature” Demoed using the form and the freeform entry box to enter parameters for a plugin Demoed required parameter plugin too  Question:     Decision in the UI, either form vs terminal   If you put guided configuration off… terminal should fill command window with form values   Gideon will implement a common buffer between the guided and freeform modes so the parameters will stay the same across, and also will try to tokenize the parameters and have error checking for the freeform mode.    If user enters nonsense parameters in the freeform and clicks back to the form, the form will flag them as nonsense and remove them from the command.    Bill Status Nothing new to report except scheduling meeting with Parul and Dan to figure out next steps. Sandeep StatusBeen working on plugin, containerize application with all its dependences. GPU part is still pending because some tensorflow libraries are failing because he’s using a newer version of tensorflow and the dependencies are older. Have a strategy and know what to do. Using stoi to build the image - more intuitive and supports many libraries. Built a sample, might need Parul’s help to move forward on that. Parul suggests Sandeep could also reach out to Bill if needed as they both worked on the demo. Sandeep planning to use a GPU internal to BCH. It’s a machine running Ubuntu 19. 10 with whatever the latest Ubuntu drivers are - Kuda drivers. Two titan 5 GPUs, each GPU has 12 GB of RAM. Medium-end GPU workstation. Parul: You’re free to use the one on MOC as well, in case you want to try out the whole stoi, in the sense you don’t have to care about the version - everything is there in the template. But it’s what you wish to do. Sandeep - I will try a sample application on MOC first then, and if that works I’ll do my application there. Parul: We don’t know when the hackathon will happen, but will be a useful thing to demo in the hackathon. Rudolph: How would you do this in the MOC right now - that sounds complicated to try to get up and runing. Sandeep: As of right now I have limited knowledge of MOC, just have an account that was provided to me. Parul: I’ve been working with Elise a bit, Rudolph, and being able to run things on power9, I have been giving her help on OpenStack vs OpenShift and pfman and pfio on MOC. I’ll give her a demo on how to configure an app on MOC, you could join that call. Rudolph: Would like to join too. Parul: I’m swamped this week so I put it on Friday between 3:30-4:30 (tomorrow. ) Adding both of you to the invite now. Parul: The plugin Bill and I worked on was doing handwriting analysis, but your plugin would be more meaningful to show bc it works with MRI. Mo StatusHas been working on short notice assets for Red Hat Summit, but mostly completed now so going to work on PACS search design today. Rudolph will be working on PACS search today too so will be available in Slack. Jorge Statusshort form and long form parameter work: Modified the plugins super class, so gives the short version and long version of flags in plugin representation. This was an issue that came up for the node configuration UI last week. Also working on the ChRIS store, adding this change to the models. Right now the system works as before because the long flags are used by default, so current plugins work as the long flag is assigned to the short flag. New descriptor is called shortflag. If you want a plugin that defines both that shows up in the system, need to commit something to the plugin (docker image) to pick the new version of the superclass. You don’t have to do anything in the frontend, Gideon, because previously you were taking the flag, now flag will be assigned to the long flag. If you want to show both, you can use the short flag. making our repos more friendly to new contrbutors: Make some changes to open source repos, make them more attractive so we could onboard more people. Added the ChRIS logo. CuBE, ChRIS store, and cookie cutter github repos. Trying to make repos more informative to get more people interested. admin interface updates: Next, will be working on admin interface. Adding text edit so people can paste directly the plugin URL. A little more involved because I have to work with Django templates. That’s it for me. Rudolph StatusMostly, have been working on the PACS javascript and intermediate service that powers it. From that having discussions with Mo as they come up. Parul StatusFinished CI-CD healthcheck I wrote. Also worked on the email notifications. The whole set of things I planned for ChRIS before the hackathon are done. Maybe next thing I’ll start working on is - whenever someone makes a push to pfio pfman, to github, run services on MOC to hook it in. Pretty much my plan. Rudolph: On that note, how much work would it be to do auto-updates on power9, assuming you get the power9 images Parul: I don’t know how much effort it’d take, but my plan is first to do on x86, and whatever works on x86 should work on power9, because I don’t know if theres a thing, I don’t think there would be any difference between power9 and x86. Need to add playbook to git repo, should be a flag or whatever to build as power9 or x86. One of the challenges I see - how would I be building power9, where would the image be built, because x86 you can built statically from github but I’m not sure about power9. Rudolph: I don’t know myself, if on dockerhub, you can build non-x86 containers… I don’t know myself. Parul: Dan was talking about there was a way to do in openshift… not sure or familiar with it. This is an interesting thing we can work on. After closing the loop with pfman and pfio, should take care of everything otherwise it’ll send us an email if things aren’t working. Jorge: Running swift and openshift on MOC right, have a question. Trying to figure out a website for my company, was going to put a partner with Red Hat, BCH, MOC, is that fine Rudolph: Fine by me. Discussion: Recruiting new contributorsSome ideas:  Participate in next Outreachy round (need ~$6k funding) Set up a domain for the project and website"
    }, {
    "id": 10,
    "url": "http://localhost:4000/status-mar-19-2020/",
    "title": "19 March Status - ChRIS admin panel demo",
    "body": "2020/03/19 - Jorge walked us through a demo of the ChRIS admin panel to register plugins to ChRIS from the ChRIS store. Jorge ChRIS Admin Panel DemoThis panel uses an admin tool built into Django. It’s part of a larger workflow we need to support for the hackathon:  Create plugin Add plugin to the ChRIS store Register plugin to a ChRIS server Run plugin on data in ChRISThis admin panel is what would be used to register a plugin already added to the ChRIS store into the ChRIS server the panel is running on.  We had a discussion around the layout of the form for adding plugins as well as the interface for modifying how already-registered plugins are configured. Add plugin interface: Some confusion that came up about this form was the environment around it:  Is there only 1 ChRIS store? Could there be more than one ChRIS store you might want to register a plugin from?Currently ChRIS can only register to one ChRIS store, but there isn’t any reason why it shouldn’t be able to register to multiple ChRIS stores. There could be a multitude of stores - for example, a given institution may want to stand up their own store of content curated specifically for their staff’s usage rather than allowing anything on the public store to be registered to their ChRIS. Each plugin in a ChRIS store has a unique id that is unique to that ChRIS store. Each plugin+version has an id. So for example:  some-plugin v 1. 0 could be id == 1 some-plugin v 1. 1 could be id == 2The way the ChRIS store works, it doesn’t treat different versions of the same plugin any differently than other plugins. The issue here is that an ID number of 1 on ChRIS Store A is likely not the same plugin with id #1 on ChRIS store B. If a given ChRIS instance could be registered to multiple ChRIS stores, we need to ensure there’s clarity about which specific plugin the user intends to register to their ChRIS. We talked about two potential solutions to this issue:  There could be an order of precedence across the ChRIS stores your ChRIS server is registered to, kind of like how there is for package repos on a Linux system, when it can’t find a package in repo #1 it falls back to repo #2, so on and so forth.  We could have a unique ID of some sort that would encode both the ChRIS plugin + the ChRIS store it resides onThe first option, it was pointed out that for researchers trying to reproduce results with the exact same image as preivously used, this might not be precise enough a mechanism. The latter might be a better solution since it is very clear the exact plugin source and version needed. Using the plugin’s URL was suggested as an easy unique ID, or having a dropdown to indicate which ChRIS Store. After the meeting, Jorge and Mo discussed this and came up with this mockup: One issue Jorge pointed out - what happens if the user fills both sides of the form? Mo suggested a javascript that greys out the vertical half of the form that is not in focus so it’s clear the in focus side would be submitted. Modify already registered plugins in admin interface: The other piece Jorge demoed was a list of plugins registered to the ChRIS server in the admin panel: It was suggested the list be put into alphabetical order and allow for searching of specific plugins so it’s less overwhelming to find what you’re looking for. Mo Status Mo showed a work-in-progress mockup that translates Rudolph’s PACS search application as a tool embedded into the main ChRIS UI. One question that came up - would we build custom UIs like this for other data sources, or how would those be handled? We talked about having a separate ‘Reference’ section of the library which would be a single place multiple ‘collections’ of data could be plugged into in a generic / standardized way, not requiring custom UI: "
    }, {
    "id": 11,
    "url": "http://localhost:4000/status-mar-12-2020/",
    "title": "12 March Status - Node config UI Demo + pacsquery UI demo",
    "body": "2020/03/12 - Gideon has a working demo for the node config UI, so we walked through it and discussed it. Then, Rudolph gave us a demo of the pacsquery UI he has written on top of ChRIS. We went through everyone’s status as well. Gideon Node Config UI Demo Demo of the node config UI.  Main discussion points:  UI Discrepancy: flag is ‘-a ‘in form field box, but the generated command at the bottom shows ‘–ageSpec’ instead of ‘-a’     Rudolph: discontinuity a UI concern   Rudolph: the actual plugin can specify long and short forms… whichever is in the python code first, gets returned. When I wrote this plugin - I think the ordering there has an impact.     Dropdown confusion: why is flag a dropdown     you can change it, in case you picked the wrong one   if you click on -a and make it -P, this doesn’t update the generated command. Gideon hasn’t wired that yet. Whatever changes you make, will update the generated command.    Idea: [Rudolph] as soon as you choose a parameter, dropdown shouldn’t be changeable, if you make a mistake you can instead click on the x to delete the row and fill in another one.    Idea: [Parul] instead of clicking add config options button to create a new row… you fill out a new row with a dropdown and field, and you submit it to add it to the list, and it gets added to generated command and saves and isn’t editable but can be x’ed out.    when you remove a row, it should remove from generated command, isn’t wired yet so this didn’t work for the demo.     Number of clicks Rudolph worried about the # of clicks, we talked it through a bit - Mo explained the tradeoff is there’s more clicks compared to the previous version, but because the screen starts out less cluttered there’s more vertical real estate for users to notice the generated command box right away. If all parameters were listed by default, it could fall below the fold and the user might not notice it. Having the generated command box enables the full blown text box on the other tab that is essentially 0 clicks if you know what you are doing. Gideon will work on finishing this UI up today, then will work towards and end-to-end demo for next week, from plugin registration to the store to ChRIS to configuring the node. Rudolph PACS query UI demo  This is a UI on top of ChRIS. It doesn’t interact with a PACS directly, it interfaces through pfdcm, which is like pfcon but connects to PACS.  There’s a form at the top that is repopulated with tags - patient id, accession number, etc. - standard tags that are used to query PACS. .  When you run the query, there would be results that appear in bottom black box. Those results would be organized according to different studies. Each one will appear with tabs. Then you can choose a different series in each study, it does the actual retrieve command and shows status above.      Accession number is one-to-one with studies - each number maps to only one study. If no accession number is given, all of the studies for a given patient ID would be returned.    The smallest unit this UI can retrieve is a series. A series is a type of scan that can have multiple images associated with it. You cannot retrieve just one image.    A study is a single session with a piece of scanning equipment. Multiple series can take place during a study. (From the time you roll into the scanner until you roll out of the scanner, that is a study. Multiple series can occur during that study - different scan types. )    The UI should show some kind of status on the hits - it’s asynchronous and can take any number of minutes… after making their selections, it should allow user to query current status with the UI.      We’re not using any plugins or services to do this, only when this app is finished, once you’re satisfied everything is pulled, will this backend will push the results into swift storage. Once in swift storage, will tell ChRIS to register those files, only then will they be visible to chris.     Query from the form - the form constructs JSON payload to send to pfdcm.      Status on what the system is doing   Push ‘query’ button, ‘performing query … be patient while running’   Results of search, each of those elements are selectable. they are the basic things you’re trying to pull.          Can grab entire study, or all studies together     Results are in the form of a table     Most of the results will be ‘series’ - a ‘series’ is a collection of files. 1 scan that has been done during a study.      The most basic you can choose is a series. you can also choose a study.           Jorge StatusNew Asynchronous Task Queue in CUBE:  finished async task queue work     can now scale cube processing independently of server serving requests   will improve UX, offloads work from CUBE to async workers   most difficult thing was implementing automated test. worker didn’t have access to same temp DB that django creates for the tests…. figured out a solution - in-process worker in the same process as the test, then run test with that worker. It’s a nice solution.    Admin interface for registering plugins:  next thing Jorge will work on is the admin interface to be able to register a plugin through a django admin website. simplefsapp issue:  if i run simple fs app twice, first time is registers, but the second one doesn’t finish. seems like pfcon can no longer communicate with pfman or pfioh. an issue with swarm.      if i have system up, run simple-fs-app, and it finishes successfuly. if i run it again, it never finishes, and when i see the communications, pfcon doesn’t seem to get a response from pfman or pfioh in the logs.    [gideon] i saw this as well, communication didn’t happen and files not returning from backend. data exchange finished successfully - i have it on my screen i can show it.    [rudolph] you instantiated cube and didn’t run the tests, right because you have to clear state from the tests or bugs like this happen.    [jorge] yeh i didn’t run the tests at all. files registered, runs successfully first time. i dont see any response. i thikn pfcon trying to send requests but pfman pfioh not responding.    [rudolph] i can look into that. are you looking at logs in real time or buffered   [jorge] i’m using docker attach command, so it’s real time, interactive terminal attached to container.    Mizmo StatusNothing to report. HackathonWe pushed out hackathon until things more stable… but not coronavirus is throwing a wrench into a lot of stuff. "
    }, {
    "id": 12,
    "url": "http://localhost:4000/status-mar-05-2020/",
    "title": "05 March Status - Async task queue for cube and more fsplugin UX discussion",
    "body": "2020/03/05 - We went through everyone’s status, and The main items of discussion during this meeting were the new asynchronous task queue Jorge developed and further work needed for the frontend handling of that, and we also walked through some mockups on how to integrate fsplugins in the UI. ” Rudolph Status Want to show Mo a demo of how the new PACS lookup tool works, after meeting because not ready yet For usage of ChRIS inside institution, PACS lookup is the main way people interact with the system, so it’s an important workflow to get done and get done right.  New member of the team : Sandeep. Will start out developing plugins. Worked with him end of last year - was a grad student in cloud computing course with Parul. Plugins will work on deployment of network for cementing brain images. Will try to productize and have as a usable workflow. He will start by looking at that. Gideon Status Still working on adding plugin node workflow Once that’s done, tomorrow will start registering the plugins, one that is created in the lab by someone else. See if the workflow works end to end, with a demo likely next Thursday on the entire workflow Entire workflow: from adding a new node, to registering someone else’s node, then adding their dataset to swift storage and run their plugin through the new wizard that Mo mocked upJorge StatusNew Asynchronous Task Queue in CUBE:  Implementing asynchronous task queue for CUBE. Have it almost totally implemented now. It’s working and works fine. This queue is to offload some of the work out of the CUBE container into a separate ocntainer. For example - registering output files with CUBE can be done from a separate container. That should improve the UX because the requests will resolve more quickly.  The main issue here is with integration tests… the workers for asynchronous queue don’t pick up Django temporary testing DB, they pick up the normal DB. Django is testing with one DB, this is working with another. Getting those integration tests working now, otherwise whole thing is working nicely.  [Rudolph] This adds some extra complexity but we believe the payoff is worth it. There are some actions in CUBE that are super important, registering all the files after the plugin is finished and they come back. Unfortunately these are synchronous, so it freezes the web front end for 10 seconds registering files into Swift. So we’re offloading it to threaded / async workers so there’s no lag visible to the user during file registration.  [Jorge] Very common in web apps… server shouldn’t spend more of a fractoin of a second attending each req. Any req that requires data processing or external REST API calls, etc. should be offloaded to asynchronous worker. Everything is about contacting pfconf, so pfcon has to contact remote services. Everything outside of CUBE will be offlanded to async queue.  [Jorge] There is a GET request to check running status of task in remote compute…. . that GET req has to contact remote services. If everything is finished… come back and register file.  [Dan] Is the result of registering the files previously required and now will have to be polled in a second request?     [Jorge] User made a GET req, internal svcs contact remote. IF the job didn’t finish in the remote, then the req came back immediately saying ‘status started’ - then front end kept polling (not sure how it’s implemented now) until the GET request comes back with successful finish status.    [Jorge] We could implement as polling directly from the workers, polling the backend services instead of the front end doing it. Not sure.    [Rudolph] When you’re running a plugin, all of that handled by pfcon. When it’s finished, pfcon will have received all the data and packed into swift. But CUBE doesn’t pull or know about it - runs async to CUBE. Only way CUBE knows is that in the front end theres a GET status to find out the current status - it asks pfcon. So no polling in the system, all external event driven. At some point it’s finished and sitting in swift. If pfcon says it’s done, then and only then, will CUBE in its thread of exec will register the files sitting in swift to itself.    [Dan] if there’s no polling from client to swift side…. [1] hasn’t finished yet [2] finished but not ready to return result bc registering it [3] finished and reg finished. So at a minimum client has to ask twice - when it’s done but results not registered…. then again when results are done and registered. So you’ll never get the result on the first try unless it finished an hour ago.    [Jorge] Once the plugin makes the GET request, entire thing is pushed off to the async service . Will come back with not finished yet - async svc will contact backend, will know that the status is finished, db updated, all files downloaded, then next time when the user makes another GET request, it says yes finished successfully - files will be there.    [Dan] The weird part I’m describing - it’ll never be there on the first request, because the first request kicks off the registration process?   [Jorge] It never says it’s done if the files are not there   [Dan] Let’s say it finished an hour ago. IF I make request now, it’ll say done but not registered…. even if finished 2 months ago… then I’ll be confused… that delay is a weird UX.    [Rudolph] It’s so client dependent bc didn’t want CUBE To internally poll bc it would hit synchronous thread… it’ll freeze for X amount of time bc it hits before file reg is done.    [ACTION] We should adjust the expreience so when the user comes back they don’t always have to wait for registering on the fly.    Mizmo StatusLibrary mockups for fsplugin UI integration:  Gave a quick demo of rough library mockups to demonstrate how fsplugins that output reference data could be integrated into the ChRIS UI: Overall workflow similar to RAW image processing tools like Adobe Lightroom or Darktable - you gather the raw data first, then go to processing (feeds) This is a very rough sketch of what the library would look like. From here you can do a new PACS lookup, upload local data, or search for reference data (which is essentially searching for fsplugins that output reference data). You can also view a list of data you accessed via any of these methods in reverse chronological order.  This is a very rough sketch of how the reference lookup could work. Essentially this is a searchable listing of the fsplugins available on the system that output reference data.  Once you’ve selected the data you want, you should be able to:     Create a new feed straight from the data or   Go to the feeds tab at a later time, click create a new feed, and access the data you retrieved into your library there   Next steps:  [ACTION] Continue with the library mockups and iterate on them [ACTION] take a look at Rudolph’s PACS search demo and mock up how to integrate into the librarySandeep Status(I missed this because I had to step off the call for a moment. :( ) Parul Status Finished PR, couple of comments on tensorflow work, finished it off.  Close to finishing off health check app to check the services on the MOC. Some trouble with the MOC and working with intern to get result. Once resolved, will get idea of the perf of the services running on MOC.  Having trouble running simple-dsapp on MOC. Getting python file not found in path error. Should not be the case, use #! in the file and should be running itself, so exec shouldn’t be happening. Looking into that. First thinking of running a different plugin to see if it’s this plugin only or an issue with MOC.  Had a workshop on Tuesday and it went well - the MOC workshop - a lot of researchers from the medical college at BU and seemed pretty interested in the ChRIS framework. We have an interested party who might be willing to explore a project. We extended invitations to the hackathon. And at least now we have contacts we can reach out to - inviting grad students in the med college would give them good exposure to ChRIS.  Before we close I want to recap what we achieved for hackathon and what we have to do:     next week demo for new plugin registration   Parul working on MOC perf. Rudolph, a script for performance would be good.     [Rudolph] Looking at domains available to have a more established presence on the web instead of our little DMZ machine here. Were thinking about getting domains and getting an ISP for it. A standard open source project setup with info - docs, repos, etc.  [Jorge] Two websites - . org for everything about ChRIS, and one for the ChRIS store as a unique entity, will be unique for all ChRIS instances. Dan Status Have nothing to add"
    }, {
    "id": 13,
    "url": "http://localhost:4000/status-feb-27-2020/",
    "title": "27 Feb Status - More Hackathon planning and fsplugin UX discussion",
    "body": "2020/02/27 - The two major discussions we had during this meeting beyond the usual status reports was Hackathon planning, how to integrate fsplugins in the ChRIS UI, and Jorge’s implementation of an extended path parameter type to enable a list of multiple files to be passed into a plugin to operate on. Mo status:  Not much status to report, did another iteration of plugin config UI with Gideon: (https://github. com/FNNDSC/cube-design/tree/master/CHRIS-UI/PNG/add-new-new-3)[https://github. com/FNNDSC/cube-design/tree/master/CHRIS-UI/PNG/add-new-new-3] Bill Status:  Bill has code review pending - Parul is still working on tensor flow, hasn’t gotten to code review yet Bill has 10 interns out of Westford, working with Steve Huels, Sarah Coghlan &amp; Hugh Brock - working on putting together bootcamp for new interns, so if anybody has interns coming in this summer, get in touch with Sarah and let them know and they can be included in this orientation session. New space in Boston will not be available in time for interns in Boston office this summer, will be tight.  Bill will be unavailable after this Friday for 2 weeks on PTO… Parul has his mobile if needed to get in touch.  Bill and Parul will sync up on what’s next. Rudolph Status:  Travelling last week and this week so not much specific to reportDiscussion points::  1 - Hackathon dates: Thinking about a time &amp; date for hackathon. Don’t want to push out too long. Need to decide.  2 - fsplugins: How do we address the fsplugins in a way that doesn’t have them scattered all over the place… maybe revive a design conversation we had a long time ago about fsplugins.  3 - How do we incorporate javsacript apps in ChRIS: Making progress on a PACS query/retrieve javascript app. Within Children’s, having the PACS query/retrieve working internally an MVP. Most ppl use ChRIS right now to pull data from PACS, so getting this working will allow us to use the latest version in ChRIS internally, which we cannot currently do without this functionality. Another thing that’s important to talk about from a design perspective - based on what I’m hitting up against with PACSpull, how do we incorporate these external apps seamlessly into ChRIS, since PACSpull is an important one.  4 - PACSpull/cube changes: Changes we’re considering internally wrt CUBE that relate to this PACSpull request stuff. I can speak to it briefly, it’s on the CUBE side. Dates for hackathon:  Can push back to april-may. Conferences happen in June so people leave the area. Before summer would be optimal.  Need to show system working end to end before hackathon. Is it reliable and can be tested in hackathon env?     Front end: depends on progress on front end - gideon will have plugin config mockups ready by end of week, has been working on plugin registration functionality   User registration: do we need to have user registration ready for hackathon? gideon unsure. rudolph thinks not required. we can stick w existing user.    Stress test: is there a way to stress test plugins running on MOC? rudolph says we don’t have that at the moment, or have an automated set of tests that run through a couple of plugins… we need more feedback in the UI about what is happening in the MOC since it takes so long - 3 minute delay before job is executed. When MOC decides to schedule it, spins up init container, etc. If you see spinner for &gt; 20s.          3 minute job execution delay: dmcphers says it shouldn’t take 3 minutes, that should be considered a bug. parul says yes it’s a bug related to persistent volume issues, we need to figure it out     pman/pfioh stress testing: parul is doing pman/pfioh stress testing through openshift. script a little broken and she is working on it - by end of week should have some pfioh push and pman pull MOC perf findings. testing them directly and not through pfcon. Tried to do that earlier but ran into issues, sometimes pfcon doesn’t provide a response with the scripts so it’s hard to parse response and move to the next step. Have removed pfcon from the picture for now.      CCC course intern is working on getting pfioh/pman working on k/openshift (x86) on power9… the work won’t be applicable to benchmark / perf testing.           ChRIS store plugin upload [jorge] Plugin developers need to be able to upload plugins to the ChRIS store, needs to be ready for hackathon. We have ChRIS store instance running at fnndsc. childrens. harvard. edu. It’s an important part of the workflow.    Make decision on CUBE server django vs apache [jorge] CUBE is runing in a development environment rihgt now, not sure if what you are thinking for stress test. Is running django server there. We have a single machine prod env that we can run if you want based on apache. But the current ChRIS is running on the normal django devel server so it won’t be as robust as a prod apache server. Make decision if we are going to stick with django dev server or to a prod apache server. CUBE server won’t be hammered too hard by 10-12 hackfest participants. But would be worthwhile to investigate how much effort involved in switching from django to apache server. Can talk about next week.    TO-DOs for Hackathon:  Probably do not need to switch from django dev to apache prod server for front ends.  Parul complete pman/pfioh stress testing.  Need to fix 3 minute MOC job execution delay bug.  Gideon to complete plugin registration work.  Need to ensure ChRIS store plugin upload functioningfsplugin Discussion:  Current feed create workflow… how do we run an arbitrary fsplugin. Crosses different conceptual domains… runing a pacs query, is to create a new feed, or just creating in the library. We’re hitting up against that. Have PACSquery thing coming online soonish. How do we get it into ChRIS? Larger question - bunch of other fsplugins that just do something and create data - how do we run them with the current UI.    classes of fsplugins that fall outside of these categories… generate a bunch of data from some internal process, have flags and create data. Basically a dsplugin workflow without input…   [mizmo] there’s a couple of spectrums as to how we could handle plugins in the UI:     On one side is we think about who is producing the plugins:         We produce the plugins &lt;===&gt; Third-party produced plugins          On the other side is how deeply the plugin functionality should/could be integrated into the UI:         It’s a default piece of the core UI     It’s an optional part of the core UI     It integrates in ways visible across the core UI, but is installed and managed under an apps sandbox (similar to how WordPress plugins work)     It exclusively lives in a plugins sandbox and does not integrate outside of that box     It’s a completely separate UI with different base URL connected to the main UI backend via APIs etc           [mizmo] for a pacspull fsplugin specifically I would suggest the functionality live as a piece of the core UI or an optional component of the core UI under the ‘library’ tab. It can also exist where it currently lives in the create new feed workflow, or the new feed workflow tool can reference it via the library.  [rudolph] what about other fsplugins that emit data, e. g. that produce reference data? [mizmo] I would also suggest treating these as library components. We could have different classes or categories within the library, and these could be categorized as ‘reference’ datasets. I would want to emphasize the content the fsplugin provides to users instead of how it is provided to them (whether that’s an fsplugin output, a shared network filesystem mount point, etc. )Jorge Status:  Internal storage in CUBE/ChRIS Swift storage… hospital-wide repository where you can put data from various hospital DBs. One thing I’ve been working on is all the file-related APIs in CUBE, such as user-uploaded files, plugin-generated files within a feed, new PACS file API I’ve been working on. Have to represent path to the file within internal Swift storage. Will expose within the APIs, the path within Swift storage, so plugins can now use that path to access any file within any feed or within the user storage space. We have to make sure the user running the plugin is authorized to access those paths. Many things will be in swift from different sources - CUBE will register those files with the APIs so those files are available to users in ChRIS.  Also worked on optimization we wanted to implement. Created new parameter data type: xpath / extracted path - list of strings, paths separated by commas. Now you can pass to a plugin a list of paths in the internal storage so that the plugin can grab those files and do whatever it wants with it. All of this is part of an effort to make any file in Swift available to cube users.      extracted path data type can also indicate just copy from swift, do not go out to the MOC to optimize movement of files   [rudolph] once this is enabled…. topological implication. If we have the ability for cube to access files arbitrarily from swift storage, plugins can now in theory be able to pull from nodes that are not their direct predecessor. Eliminates need for bucket brigade. Plugins can work with data of different ancestry down the tree.     At some point we need to think about the idea of a single swift as the backbone between the remote compute environment (MOC) and the ChRIS servers inside the hospital.  Added a new PACSfile django app to cube to manage files downloaded from the hospital pacs. So he has some services and apps that can download files from the hospital pacs and store them in swift. Those files can now be registered with cube so they are available to the users of ChRIS. They will also be searchable using PACS query parameters.  Next thing I’m working on now - will be added an asynchronous broker to cube, to enable a sync process running in a diff container or machine to register files. Right now, when the files come back from pfcon and they need to be registered in cube, it makes a get request that takes quite some time, shouldn’t take more than a fraction of a section. So we will offland that process to an external containers. "
    }, {
    "id": 14,
    "url": "http://localhost:4000/status-feb-06-2020/",
    "title": "06 Feb Status - Hackathon, Swift, and node parameter UI",
    "body": "2020/02/06 - The main items of discussion during this meeting were using the fnndsc. childrens server for the hackathon and making it more persistent, optimizing file ops that occur within swift, and the node parameter config UI. Gideon Demo:  bugs in the UI around animation in legacy coode. has been working on fixing them.  added ‘share feed’ button &amp; capability working with mo on adding new node mockups a production bug working on will be working on deleting node feature will also be working on implementing mo’s new mockups (adding new node)Hackathon Server and Performance Discussion: Parul: When can we put new ChRIS UI on MOC? I’m talking about the time it takes for the job to kick off, long time it takes because of the binding time for the PVC, he’s working on that. But if you can do some testing from your side, making a note of all the issues we face, then we can coordinate and talk things out. Rudolph: That’s fantastic, not sure if we have the most recent version on fnndsc. childrens. harvard. edu page… Gideon: I don’t have the same bug in devel but I have it in production. I fixed that yesterday. If I can get through that today, I’ll build it for production and have it up on fnndsc. That was the goal yesterday, hoping to do today. Rudolph: I think Jorge might have production end ideas. Parul, yeh, two things: 1 - we should have this up on the public exposed site. 2 - on the public exposed site - all the ones that end with _moc are registered to run at the moc. So yes, as long as a chris is instantiated and exposed, you shoul dbe able to dispatch any of these *_moc plugins and ru non the moc. Paul: Sounds good. Parul: For hackathon, are we going to use public facing fnndsc. childrens site, or some other server? Rudolph: We can do either. The public facing server is not on a fantastic machine, it’s a VM with just 2 CPUs and 16 GB ram. My laptop is more powerful than that. So we can do either/or, whatever makes the most sense then. Dan: If we’re doing the hackathon, I think - correct me if i’m wrong - part of the goal is to utilize the MOC resources, play aroud iwth chris and learn more about it, write plugins etc. Build out interest. If we don’t have something there runing they can go back to consistently, we won’t get as much attachment as we’d like . So should we devote more resources to that vm, get more VMs at childrens? Or set up more resources elsewhere, but then how would that tie into childrens? Rudolph: the public-facing one should be fine, just suggesting - we have more powerful machines just sitting around probably. Dan: Can we fix that problem? Seems like if we’re ready for hackathon, seems like we also need to have an instance we can point them to consistently Rudolph: yes we can do that. In the meantime I can put in a request to have that VM beefed up a bit. You might be suggesting, if I’m reading between the lines, the idea of a more premanent ChRIS as opposed to currently how it goes up and down, we restarted it, wipe it, switch storage, etc. That’s something we should think about - having a persisten almost production site. Dan: Yeh, at a minimum, a permanent playground, we can always point people to, let them build stuff, make it work. For permanent production - not sure about use case… not sure about any org that would run something on it permanently. but some level of prod capability so people can develop againt it, and it’ll be there fairly reliably. Rudolph: esp if you have a hackathon, if they want to come back a week later and see what they put into it. From that POV it makes sense. Altho usually hackathon playground, are just up for the few days of the workshop. So it’s 4 cpus and 16GB of ram but we can def make that more permanent. We can just decide, have the one on fnndsc become more of a permanent resource. I think it’s fine for now to have it available as a playground for a stretch of time as well. Jorge: It’s fine… we can make a kind of a single machine production deployment. was working in the past, maybe give me some access to that machinem, i don’t have access right now. Really important to show devs the workflow of writing the plugins and submitting to the chris store. Rudolph: I Was hoping you could take the lead on those instructions / write up, using the ChRIS store UI. Jorge: Maybe try to do this once with your own plugin through the chris store UI, also running on fnndsc, not difficult at all. Rudolph: I haven’t done that for a long time, will try the UI. Parul: Check with whatever the capacity of the VMs right now, how many concurrent users it supports. We should be prepared at least for 10 (or just decide on a number) for concurrent users a single instance of time. I think we shoul dhave a dry run of how many users can be supported yb the VM we have right now. Just an idea, we can discuss on it, or think on another solution so we have an approximation of how many users we can support so the hackathon is less chaotic. Rudolph: Yeh that’s a good idea Jorge: The resources the machine has should be enough for 1000s of users, could be the network though… Dan: do you have a perf run that shows how well it scales? Jorge: no but, as I see typical amazon services machines… when you use them you get 32gb or 64gb ram machine… Parul: it’s not just hte machine, the capacity of the app as well, how many users can cube handle, we’ve never touched such a scenario. Jorge: the slow part could be files coming back from pfcon? Dan: Maybe let’s not guess and just if we can perf test it, it’s probably worth it. Jorge: We can use the hackathon to see ;-) At least the ChRIS store will work fine, the most important part they’ll interact with. Dan: gut feel or do you have a data point there on chris store? Jorge: The ChRIS store should be fine bc nothing compute intensive there, nothing extraordinary. Dan: Im sure youre right but I’ve seen apps that are pretty simple that have flaws that cause issues too. It’s ok either way, if we want to take a risk so be it, but could be worthwhile to perf test. Rudolph: I totally agree. Jorge: We were also going to discuss some optimizations we have in mind today. Parul: these are good points, I’ll make a note on it and follow up again some time later during our meeting in a few weeks. == Note: Exposing JSON feed status data in UI == Parul: Another Q - not important but Rudolph, you were talking about JSON? Rudolph: you mean the feed status feedback? That’s an important one, from the UI perspective, we have the information already, so it shouldn’t be too much to capture that. To provide more meaningful feedback to user. Parul: I created an issue under MVP Jorge Status: Backend modifications to enable front end to work with files:  I enabled the front end by working on the back end, to enable front end to choose files when in the new node UI, could choose files from everywhere in chris from the user’s feed, filesystems, or the users upload filesystems. the backend also needs to be able to validate that any request is accessing files in an authorized path in swift, for that user. I implemented that and seems to be working fine now. Discussion: Inefficiency in swift copy operations:    [Jorge] Rudolph and I were talking about optimizations for ChRIS. Especially for plugins that only want to move files around in swift. Let’s say currently a plugin that only wants to move a file from somwehwere in swift to somewhere else in swift - goes thorugh a very inefficient pipeline Let’s say data first needs to be copied out of swift? Then data is sent to pfioh, then pman runs the plugin, plugin copies the data to its output there, pfioh sends data back to pfcon, pfcon put data back in swift again. All of that just to move a file from somewhere in swift, to somewhere else in swift. It’s a very inefficient pipeline. So I was thinking about how we could optimize these things:          Basically a plugin that wants to work with swift, can only download a file from swift, process, and then upload it back to swift. I think that can be done by pfioh in the usual way. That use case is pretty much done properly by pfioh.           The other case is copying files from one place in swift to another place in swift. Important thing is a plugin can only write files to its output dir. That’s the key in the ChRIS system. A plugin can only write files to its output dir. It means a plugin can not just go around in swift and access things, copying whatever it wants. That can make the system inconsistent and other things. Having that in mind… the best solution - instead of adding new services and credential secrets - i think we can just add a property to the path data type. If that property is true, then please don’t download the files from swift but just copy them to the output dir of that plugin. The service doesn’t know where the output dir of that plugin is going to be in swift…       Rudolph: There’s a whole bunch of stuff here, let’s not get too lost in the weeds bc conceptually and technically can get very complicated. Short story is, when we were putting together how to do the file upload and choose places in chris storage to create a new feed - it’s a very powerful thing to do. Upload local files. What you cannot do right now but for arugment’s sake - if you can select more than one dir in the chris file select. It’s an extremely powerful operation here - it’s a dircopy that creates a new root feed with info taken from somewhere else in the swift storage space. This comes down to what we’ve talked about, harvester plugins or some mechanism by which you can pull data from diff sources in the tree. Imagine ChRIS feed tree here - we’re kind of making a JOIN between arbitrary data points in the tree. What we’re doing in this dialog box here is pulling together data from diff sources across the tree which is extremely powerful. GO into it deeper, there’s definitely a case to be made for some kind of behavior in the system where something we call a plugin is able to harvest data from multiple places in the tree. That’s a bit of the discussion Jorge is touching on. I do think something like that owuld be super powerful to do. We’ve essentially done this but using an fs metaphor. If we could do this with a ds type plugin, we could link any kind of previous directory to a next node down the chain. Detail can be hairy and complex, but a very powerful thing to do. We don’t know a good way in which to do it, but thinking along those lines. Could mean a new class of plugin or behavior in the system that doesn’t yet exist. In our current metaphor / context / syntax we can’t do it. Jorge: That’s part of the thing - we currently are able to copy files from one of those folders in the path in the ChRIS tree… that can be done by dsplugin or fsplugin. Currently system is able to do that. Multipe choices in the UI is a bit more complicated, bc it means you are sending a list of files to the backend, and that is difficult to put the maximum number of connectors on that. But we can do that actually with whatever in the chris path, choose a file or dir and will be made available for it to process. Rudolph. I was also talking about the other part of how the system works for these plugins that copy a file from swift to another place in swift. Pipeline is very inefficient for that. Rudolph: Yes it’s super inefficient for that. Jorge: We were talking about that, maybe adding new services, bc you were thinking along the lines, maybe plugins could access swift directly. That would be very difficult, would imply creating new services, passing around credentials. Rudolph: We’re thinking about this and a lot of technical ipmlications. SImple one line message, we’re thinking about a new way of internacting with the system not currently captured by the current design. IF anyone has any ideas or thinking about this - some mechanism by which you can do some operations without going through the whole pipeline of things we do now, you can boost efficiency by orders of magnitutde. A simple copy right now involves 5-6 network operations, when just involves copying things within swift. Should be almost instant but takes minutes to do right now. Our pipeline was never geared to do those kind of internal ops. That’s the short story. Jorge: Proposing a solution for that - adding a flag to a parameter so the system knows not to go thorugh the typical pipeline, and instead handle internally in swift. Would make pipeline more efficient. This is easy to do with amazon services, easy to do if you want to have swift local from private to public / hybrid cloud. my question is, is it easy to do this with the moc? Can we have a swift cluster there, on premise to the cloud? Only on-premise chris system that doesnt interact with the cloud - it’s obvious having two swift clusters doesn’t make sense. For hybrid cloud, also makes sense to have a single swift cluster, simplify a lot of the pipelines. Rudolph: This is an important discussion and we need to get to it. Technical and hairy but could make a huge difference to the system. Jorge: Yep, just want to get a take on how difficult this would be in the moc. Rudolph. Probably not necessarily easy but probably doable, not happening likely before the next 6-8 months. Parul: We can come back then to discuss. Mo Status: Talked to Gideon and Rudolph about add new node mockups - would like a copy/paste freeform text field for specifying paramters + arguments to them rather than just the form. Considered having a ‘mode’ where you’re in freeform vs form mode. Or allowing users to override freeform with the form. Mo will noodle on this and figure out an approach. Mockups are available here: (https://github. com/FNNDSC/cube-design/tree/master/CHRIS-UI/PNG/add-new-node-2)[https://github. com/FNNDSC/cube-design/tree/master/CHRIS-UI/PNG/add-new-node-2] "
    }, {
    "id": 15,
    "url": "http://localhost:4000/status-jan-2020/",
    "title": "30 Jan Status - Local file upload in web UI",
    "body": "2020/01/30 - The main item of discussion during this meeting was Gideon’s demo of the web ui which is now enabled to handle local file uploads into ChRIS. Action Items:  mo to mock up dialog for inputting arugments to plugins rudolph &amp; team to set up public facing fnndsc. harvard site to run latest code for ui mo will try to set up latest locally mo also going to look at a mockup for feed status based on the 4 parts / states jorge to continue work on security for user files in swiftStatus: Gideon:  Gideon has local file upload working now in the UI ChRIS file select works too Worked on UI performance optimizations and it is much snappier now. Web UI Demo: ChRIS file select root now starts with ‘chris’ file root. It now shows the entire swift space, potentially all the users as well. So you’ll see the ChRIS root node. The feeds are created by this user ‘chris’. If user ‘rudolph’ were doing this, it’d start with a ‘rudolph’ file root. One of the reasons for this - we’re also aiming down the line to integrate the whole PACS query &amp; retrieve mechanism into this dialog. The idea would be when you do a pacspull or from any external db, that’s also packed into swift and navigable from this tree. so you have to be able to see the entire swift space. The pacs stuff you pull isn’t going to be user-specific, it’ll be generic. Discussion: Model for Working with Files:  Q: (Dan) How often would a set of files be only used by one user, or shared by others? Is it correct to associate with one user vs. the source which is more tied to the data? A: (Rudolph) I don’t have a well-reasoned argument either way - not sure what’s optimal. We’re still adhering to a full filesystem philosophy here. We need it to be able to, within ChRIS itself, copy an existing dataset somewhere in the swift storage to be the root of a new tree, to have dircopy to be able to see the entire tree instead of assuming it’s always this user just runing it. Sharing between users… I don’t know yet how that would work.    A: (Jorge) Feeds can be shared between users, so feeds shared with you by another user, they have paths that have the other user as a root.     Q: (Dan) If we were to ask people to give it a name, instead of taking their username and making it the root. If we asked them to give it a name, would they have one naturally or too cumbersome to ask? Do you associate data with usersm or where it came from? If I’m a researcher or doctor, whomever, if I run it, do I want to see output under my name or output associated with patient / study/ etc tied to data. If I leave the organization and someone else comes in. How do they pick up data where it was if it’s in my name?     A: (Rudolph) To me it’s logical to have username as root. Having it rooted in this structure to me is logical. That’s a good point about users leaving an org. Not sure if one way to do this that covers every use case. Arguments that can be made every way to represent the data. All I could say, this is now representing how we’ve organized swift without any filters. This is how swift storage is currently organized. It rooted its display in your user dir. Now switching display to root of entire tree.   (Rudolph) So at this point we can upload data arbitrarily. Can also create new root feeds from anywhere in the swift storage.  (Jorge) Previously only ability was creating new feeds from data in the user’s upload space. Now it’s extended to the whole 20 other preivous feeds. Now that we see file browser… maybe if pacspull can pull data to somewhere that not under the user space… a plugin will always pull in under a user space.  (Rudolph) The way PACS being put together… a separate microservice that actually sees the swift storage ChRIS sees, and writes the resultant pacs results into the same swift storage. Has no concept of the user necessarily who is doing the request. PACS query / retrieve doesnt have to be strictly tied to ChRI Sor cube (Mo) The high level model of file handling currently is implemented like Google Drive with some of the same issues (when an employee leaves, files are in a bit of a limbo, for example. ) I would like to evenetually have a model where this userdir is like home dir on laptop - a scratch space rough files and drafts in progress for individual users, and eventually have a more formal “published” space, a commons of some sort. A workflow would enable users to ‘publish’ more finished / final draft work to a shared commons area. Published files wouldn’t be owned by that user so if the user left they’d still be accessible. Issue: Does dircopy take only one directory at a time or can you select multiple directories at a time?:  (Rudolph) Gideon mentioned, dircopy plugin now only accepts one target dir argument, that’s why you can only choose one. But dircopy plugin can be reengineered to handle multiple directory as possible arguments to copy stuff from all over the tree into one feed again.  (Jorge) Also will require changes in base class…. datatype is now defined as a single path. So that will require making more general, a list of paths separated by comma or such. Discussion: Plugin Execution Status: For Hackathon in March -  Would like more intuitive feedback to user on actual execution status of any plugin.    When you run it, you just get a spinner in the status area. When you click on status you don’t get more info. In the backend though we get info about it’s currently computing and pushing files. Would be cool to show when user clicks to see files, we could give them the remote job status where it’s in the pipeline (computing, pushing to swift, etc. )   Q: (Parul) When we see status in right panel, does status get updated? A: (Rudolph) yes, what happens in cube, there’s a module. When you ask it for status on a job, it gives you a json object that has 4 parts, each of which have scheduled, started, completed, error states:     Sending data from cube to remote location   Compute scheduled / started / completed   Remote data being pulled back into cube   Data in cube being packed into swift. Would be great to expose those 4 states as a progress bar, change color based on current state that stage is in. Would like to have that as part of the UI feedback.    Discussion: UI for admins to load multiple plugins at once into ChRIS:  (Rudolph) The other thing we’re doing, Jorge is looking at, once you have a running ChRIS… to make the whole process of having a user (workshop attendee) who’s made a plugin and registered it to the ChRIS store, to allow the admin at the workshop to pull that plugin into ChRIS.  (Jorge) Users don’t register plugins directly to ChRIS, register to ChRIS store. That is now currently through ChRIS store UI. Register and upload there.  (Parul) We discussed last time, registration through UI is not MVP component, we were going to do adhoc registration at hackfest.  (Jorge) But users will have ChRIS store instance running for them at hackathon, will create plugins in that chris store and upload. Then ChRIS admin at hackathon can run that script or use another UI for ChRIS to add into ChRIS (Rudolph) For the MVP, being able to do this - I think we can do this today, it’s just behind the scenes and hacky-ish. I think it’s doable for us to have a better end user workflow, so they could make their plugin, register to the store, and that’s all they’d need to do. And what registers from the store ad hoc to cube is working today already through command line scripts. That’s where we are with that.  (Jorge) We can improve the ChRIS admin experience. If he can have a private website to register pluginsDiscussion: Plugin configuration UI:  (Rudolph) Before Mo went on leave we had a lot of discussions about how to handle plugin configuration in UI. We have gone in this direction - to have a form to fill in the flags. Doesn’t handle dependencies.  But better than a large blank textbox for writing command line manually. Provides hints for each plugin argument. March Hackathon:  (Parul) Have not decided a time line or deadline for the MVP. Planning to have hackathon and not decided on date or when we have achieved or finished components. Will decide on a date soon. Status: Jorge:  Gideon said most of what I did. I exposed some API descriptors that Gideon needed for creating file browser.  Also working on the permissions problem. Previously the frontend didn’t have a full path to the backend. Kind of truncated path, then the backend build that path automatically based on the user. Was possible bc already looking at files based on user uploads. Now upload needs to send full paths to backend to provide standardization for everything. Some things in swift, some in user upload space ,some things in the feed space, which are all managed differently by cube.  In order to see as a single thing, use path as a standard thing. needed to expose a full path frm the backend to every file, but this comes also with security problems, as the user can send a malicious path - eg root of swift - to put all the files inside a feed, so those things need to be considered. i’m working on validating paths to make sure user has the right to pull files from the path he’s sending to the front end.  We also had a lot of discussions. that’s what i spent my time on. Discussion: User file permissions / security:  Q: (Parul) would swift allow you to pull from the root as a user wo privilege? Does swift not restrict this by default? A: (Jorge) swift is object storage system, it understands stream. we’re using paths with a / to make it easy for scientists / etc who are used to paths, but swift doesn’t understand really about paths. it’s a good thing, it takes a lot of the nightmare of dealing with path mgmt system…. if i could a /, it’s just a path. it doesn’t put any restrictions on the name for files. so swift doesn’t really have paths, just strings.  A: (Rudolph) Right now the way it’s impemented, there’s swift storage, and that obvs is authetnticated with a swift user. right now that swift user isn’t anything to do with chris user. Swift storage has one user, one password, so chris is effectively storing stuff in object storage only ever as one user.    A: (Rudolph) there’s no file system in swift, we’re making it look like one. we’re interpreting the strings as a filesystem tree but swift doesn’t have any concept of that.   Q: (Parul) So what kind of validation are we doing in swift A: (jorge) each obj has a string assoc with it, we make it look like we’re using paths. User of chris system who has plugins running, everytihng in the store for him the string starts with his username, that’s how the system works. looks like the first part of a path, but the beginning of each string. we havea to make sure that eveyr string the user sends, for the ui user looks like a path, always starts with the user name of the user making the request. that’s one case.  (Jorge) he could also be allowed to send strings that start with another user name for a shared feed. in that case, validatoin needs to be done. so that’s the kind of validation we’re working on . make sure the string is a valid string for the user making the request, so he can’t just pull files from wherever he wants.  (Parul) what we are trying to do is make sure he’s not putting in an invalid path, bc all the users who are logged in would have access to other user’s files otherwise (Jorge) API enforces very well that users can’t access other files, but the new issue here is the dircopy plugin. we need to implement a way to avoid the loophole it poses. Status: Rudolph:  In parallel to this demo, working on finishing work to implement the infrastructure to do the PACS query and retrieve. that is one kind of thing that is the most-used feature of the current ChRIS (the clunky cartoony 5 years old version in production here at children’s) People use the pacs query, mostly people want to use ChRIS for no reason other than to use it as an easy way to access images from the PACS. it’s a big thing for people. one of the things missing from the new ChRIS (ChRIS next gen, etc. ) We can’t deploy this internally in the hospital wo having a usable ability to deal with a PACS query pull The whole plugin model here doesn’t lend itself to a very satisfying way to do these kind of interactive client-side functionality. it’s clunky to try to recreate that interaction / model in the current plugin system in ChRIS. way around it is to have as much of that happening client side in javascript as possible What we do have is another pf service… pfcon, pfioh… similar to pfcon calling it pfdcm (pf dicom). pfdcm will speak to the actual PACS or different PACS backends. exposes a REST interface to clients that is the same kind of dialect as pfcon and pfioh. Similar kind of json you sent to it, to say ‘hey do a query on PACS using this patient id’ . it does it all for you, spits back JSON object. can then ask for a particular series from the JSON, etc. that is what i’m working on at the momentStatus: Parul: Nothing to report. Status: Mo: Happy to be back from maternity leave and impressed with the progress that’s been made on the UI. Discussion: Versioning data:  (Jorge) Being able to pull data from many differnt sources in a simple single way, for ChRIS, from PACS, local fs, userspace, from relational dbs… it’s going to be key for success. See not only software versioning but data versioning. Not sure if that would be a thing for ChRIS, not sure how to envision that here. Seeing a lot of that - the trend is for data versioning, eg. Palantir… similar to what openneuro is doing… they are versioning data. Not sure if that would be useful here.  (Rudolph) the idea of verisoning data is definitely prevalant and creating a lot of buzz. It is true, a lot of importance in working w data w versioning like working w actual executable code. "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});